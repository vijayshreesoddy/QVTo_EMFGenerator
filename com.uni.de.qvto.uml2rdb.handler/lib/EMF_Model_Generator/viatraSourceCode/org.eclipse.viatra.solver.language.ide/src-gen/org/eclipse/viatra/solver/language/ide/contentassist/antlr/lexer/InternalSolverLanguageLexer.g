/*
 * generated by Xtext 2.12.0
 */
lexer grammar InternalSolverLanguageLexer;

@header {
package org.eclipse.viatra.solver.language.ide.contentassist.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

Containment : 'containment';

Functional : 'functional';

Abstract : 'abstract';

Contains : 'contains';

Datatype : 'datatype';

Maximize : 'maximize';

Minimize : 'minimize';

Opposite : 'opposite';

Default : 'default';

Extends : 'extends';

Problem : 'problem';

Unknown : 'unknown';

Extern : 'extern';

Import : 'import';

Object : 'object';

Refers : 'refers';

Class : 'class';

Count : 'count';

Empty : 'empty';

Error : 'error';

False : 'false';

Scope : 'scope';

Else : 'else';

Enum : 'enum';

Root : 'root';

Then : 'then';

True : 'true';

FullStopFullStopFullStop : '...';

Inf : 'inf';

Let : 'let';

ExclamationMarkEqualsSign : '!=';

HyphenMinusGreaterThanSign : '->';

ColonHyphenMinus : ':-';

ColonColon : '::';

ColonEqualsSign : ':=';

LessThanSignEqualsSign : '<=';

EqualsSignEqualsSign : '==';

EqualsSignGreaterThanSign : '=>';

GreaterThanSignEqualsSign : '>=';

As : 'as';

If : 'if';

In : 'in';

ExclamationMark : '!';

LeftParenthesis : '(';

RightParenthesis : ')';

Asterisk : '*';

PlusSign : '+';

Comma : ',';

HyphenMinus : '-';

FullStop : '.';

Solidus : '/';

Colon : ':';

Semicolon : ';';

LessThanSign : '<';

EqualsSign : '=';

GreaterThanSign : '>';

QuestionMark : '?';

LeftSquareBracket : '[';

RightSquareBracket : ']';

CircumflexAccent : '^';

LeftCurlyBracket : '{';

VerticalLine : '|';

RightCurlyBracket : '}';

Tilde : '~';

RULE_STRING : '"' ('\\' .|~(('\\'|'"')))* '"';

RULE_QUOTED_ID : '\'' ('\\' .|~(('\\'|'\'')))* '\'';

RULE_SL_COMMENT : ('%'|'//') ~(('\n'|'\r'))* ('\r'? '\n')?;

fragment RULE_TRANSITIVE_CLOSURE : ;

fragment RULE_REFLEXIVE_TRANSITIVE_CLOSURE : ;

fragment RULE_FULL_STOP : ;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
